{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Allows users who pay membership_fee to be added to the group.",
      "type": "object",
      "required": [
        "join_group"
      ],
      "properties": {
        "join_group": {
          "type": "object",
          "required": [
            "user_address"
          ],
          "properties": {
            "user_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows group members to subscribe to a LRO funding pool by contributing a portion of the requested liquidity, once the requested amount is filled, the LRO is automatically subscribed to on behalf of the group members that contributed to the  LRO funding pool.\n\nIf the msg.sender is the first to subscribe to the group, he has to contribute at least 10% of the requested liquidity",
      "type": "object",
      "required": [
        "subscribe_to_pool"
      ],
      "properties": {
        "subscribe_to_pool": {
          "type": "object",
          "required": [
            "amount",
            "vault_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "vault_id": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows group members to unsubscribe from a LRO, by withrawing their contribution from a LRO funding pool before the LRO is accepted.",
      "type": "object",
      "required": [
        "unsubscribe_from_pool"
      ],
      "properties": {
        "unsubscribe_from_pool": {
          "type": "object",
          "required": [
            "vault_id"
          ],
          "properties": {
            "vault_id": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows group members who are subscribed to a LRO pool to claim their share of the returns from the pool account after finalized_claim event is emitted by the underlying vault.",
      "type": "object",
      "required": [
        "claim_rewards_from_pool"
      ],
      "properties": {
        "claim_rewards_from_pool": {
          "type": "object",
          "required": [
            "vault_id"
          ],
          "properties": {
            "vault_id": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows a user to leave liquidity providers group.",
      "type": "object",
      "required": [
        "leave_group"
      ],
      "properties": {
        "leave_group": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the group admin to remove a group member, when they are currently not part of any LRO_pool",
      "type": "object",
      "required": [
        "remove_group_member"
      ],
      "properties": {
        "remove_group_member": {
          "type": "object",
          "required": [
            "user_address"
          ],
          "properties": {
            "user_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the group admin to transfer group ownership to another owner.",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "type": "object",
          "required": [
            "to_address"
          ],
          "properties": {
            "to_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
